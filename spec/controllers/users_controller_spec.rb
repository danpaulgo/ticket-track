require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  include_context "fixtures"
  let(:valid_attributes) {
    {name: "Valid User", email: "valid@gmail.com", password: "password", birthdate: "1993-06-18"}
  }

  let(:invalid_attributes) {
    {name: "", email: "invalid", password: "foo", birthdate: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:logged_out_session) { {user_id: nil} }
  let(:logged_in_session) { {user_id: user.id} }
  let(:admin_session) { {user_id: admin.id}}
  

  # Returns success response for admin
  # Redirects non-admins back to their own show page
  describe "GET #index" do
    it "returns a success response for admin" do
      get :index, params: {}, session: admin_session
      expect(response).to be_successful
    end

    it "redirects logged in non-admin users to their own show page" do
      get :index, params: {}, session: logged_in_session
      expect(response).to redirect_to(user)
    end

    it "redirects logged out users to home page" do
      get :index, params: {}, session: logged_out_session
      expect(response).to redirect_to(root_path)
    end
  end

  # Returns success response for admin
  # Returns success response for user viewing their own page
  # Redirects user attempting to view other user back to their own show page
  describe "GET #show" do
    it "returns a success response for admin" do
      get :show, params: {id: user.to_param}, session: admin_session
      expect(response).to be_successful
    end

    it "returns a success response for user viewing their own page" do
      get :show, params: {id: user.to_param}, session: logged_in_session
      expect(response).to be_successful
    end

    it "redirects user attempting to view other user back to their own show page" do
      get :show, params: {id: admin.to_param}, session: logged_in_session
      expect(response).to redirect_to(user)
    end

    it "redirects logged out user to home page" do
      get :show, params: {id: user.to_param}, session: logged_out_session
      expect(response).to redirect_to(root_path)
    end
  end

  # Redirects logged in user to thier own show page
  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: logged_out_session
      expect(response).to be_successful
    end
  end

  # Returns success response for admin
  # Returns success response for user editing themself
  # Redirects user attempting to edit another users page to their own edit page
  # Redirects logged out users to login page
  describe "GET #edit" do
    it "returns a success response" do
      get :edit, params: {id: user.to_param}, session: logged_out_session
      expect(response).to be_successful
    end
  end

  # Redirects logged in user to thier own show page
  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}, session: logged_out_session
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        post :create, params: {user: valid_attributes}, session: logged_out_session
        expect(response).to redirect_to(User.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {user: invalid_attributes}, session: logged_out_session
        expect(response).to be_successful
      end
    end
  end

  # Allows user to edit themself
  # Allows admin to edit any user
  # Does not allow non-admin to edit users other than themself
  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { 
        {name: "New Name", birthdate: "2010-01-01"}
      }

      it "updates the requested user" do
        put :update, params: {id: user.to_param, user: new_attributes}, session: logged_out_session
        user.reload
        expect(response).to be_successful
      end

      it "redirects to the user" do
        put :update, params: {id: user.to_param, user: valid_attributes}, session: logged_out_session
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        put :update, params: {id: user.to_param, user: invalid_attributes}, session: logged_out_session
        expect(response).to be_successful
      end
    end
  end

  # Allows user to delete themself
  # Allows admin to delete any user
  # Does not allow non-admin to delete users other than themself
  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user.reload
      expect {
        delete :destroy, params: {id: user.to_param}, session: logged_out_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      delete :destroy, params: {id: user.to_param}, session: logged_out_session
      expect(response).to redirect_to(users_url)
    end
  end

end
